#!/bin/bash

# buildcaddy - Build caddy with plugins
# Usage: buildcaddy [<plugins> [<os> [<arch> [<arm>]]]]
#   <plugins> is a comma-separated list of caddy plugins, only put ','
#     if os & arch & arm need to be specified
# Required: go coreutils(mktemp cut rm mv mkdir cd cat) wget grep sed
# If $CADDY_TELEMETRY is set and not 'on' then telemetry is turned off

[[ $- = *i* ]] && echo -e "Run this as:\n  bash $0" && return 1

Dl="caddyserver.com/api/download-page"

Plugins(){ # $1:plugins
	local i repo
	wget -qO- "$Dl" |sed 's@{@\n{@g' >json
	Repos=($(grep -o 'ImportPath.*' json |cut -d '"' -f3))
	Names=($(grep -o ',"Name":"[a-z0-9.]*","Type":' json |cut -d '"' -f4))
	for i in ${!Names[@]}
	do
		[[ ,$1, == *,${Names[i]},* ]] &&
			echo "    _ \"${Repos[i]}\"" |sed 's@github.com/filebrowser/caddy@github.com/filebrowser/filebrowser@'
	done
}

Build(){ # $1:os $2:arch $3:arm
	export O111MODULE=on
	go mod init caddy
	env GOOS=$1 GOARCH=$2 GOARM=$3 go build
	#env GOOS=$1 GOARCH=$2 go build
}

telemetry=true
[[ $CADDY_TELEMETRY && ! $CADDY_TELEMETRY = on ]] && telemetry=false
plugins= os= arch= arm=
[[ $1 ]] && plugins=$1
[[ $2 ]] && os=$2
[[ $3 ]] && arch=$3
[[ $4 ]] && arm=$4
dir="$(mktemp -d)" olddir="$PWD"
trap "cd '$olddir'; rm -r '$dir'" QUIT EXIT
mkdir "$dir/caddy"
cd "$dir/caddy"

cat <<-EOF >caddy.go
	package main

	import (
	  "github.com/mholt/caddy/caddy/caddymain"
	$(Plugins $plugins)
	)

	func main() {
	  caddymain.EnableTelemetry = $telemetry
	  caddymain.Run()
	}
EOF

Build $os $arch $arm
cd "$olddir"
mv --backup=numbered "$dir/caddy" .
echo "Built caddy for $os/$arch$arm with $plugins"

exit 0
